pipeline {
    agent any

    tools {
        maven 'maven'
        jdk 'JDK'
    }

    environment {
        DOCKER_IMAGE_NAME = "ecommerce-store"
        // Add debug flag to control detailed logging
        DEBUG_MODE = "true"
    }

    stages {
        stage('Start') {
            steps {
                echo 'üöÄ D√©marrage du pipeline CI/CD'
                // Print environment info for debugging
                script {
                    if (env.DEBUG_MODE == "true") {
                        echo "=== Environnement du pipeline ==="
                        echo "BUILD_NUMBER: ${env.BUILD_NUMBER}"
                        echo "JOB_NAME: ${env.JOB_NAME}"
                        echo "WORKSPACE: ${env.WORKSPACE}"
                        echo "NODE_NAME: ${env.NODE_NAME}"
                        sh 'java -version || echo "Java command failed"'
                        sh 'mvn -version || echo "Maven command failed"'
                    }
                }
            }
        }

        stage('ScrutationSCM') {
            steps {
                echo "üì• R√©cup√©ration du code source depuis GitHub"
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/develop']],
                    extensions: [],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Badrbernane/Store_Ecommerce.git',
                        credentialsId: 'github-token'
                    ]]
                ])
                // Verify checkout success by listing files
                script {
                    echo "Contenu du r√©pertoire apr√®s checkout:"
                    bat 'dir'
                }
            }
        }

        stage('Build') {
            parallel {
                stage('Build With Maven') {
                    steps {
                        dir('Ecommerce_Store') {
                            echo "üî® Construction du projet avec Maven"
                            // Add debugging to Maven build
                            script {
                                try {
                                    bat 'mvn clean install -DskipTests'
                                    echo "‚úÖ Maven build completed successfully"
                                } catch (Exception e) {
                                    echo "‚ùå Maven build failed: ${e.message}"
                                    echo "Maven error details: ${e.toString()}"
                                    unstable(message: "Build Maven failed but continuing pipeline")
                                    // Continue the pipeline despite errors
                                }
                            }
                            // Verify target directory contents
                            bat 'dir target || echo "No target directory found"'
                        }
                    }
                }
            }
        }

        stage('Test') {
            parallel {
                stage('JUnit') {
                    steps {
                        dir('Ecommerce_Store') {
                            echo 'üìã G√©n√©ration des rapports JUnit'
                            script {
                                try {
                                    bat 'mvn test'
                                    junit 'target/surefire-reports/*.xml'
                                    echo "‚úÖ Tests JUnit completed successfully"
                                } catch (Exception e) {
                                    echo "‚ùå JUnit tests failed: ${e.message}"
                                    echo "Test failure stack trace: ${e.toString()}"
                                    unstable(message: "JUnit tests failed but continuing pipeline")
                                }
                            }
                        }
                    }
                }
                stage('Functional testing') {
                    steps {
                        echo 'üîç Tests fonctionnels manquants ‚Äî √† d√©finir si besoin'
                    }
                }
                stage('Performance testing') {
                    steps {
                        echo '‚öôÔ∏è Ex√©cution des tests de performance (placeholder)'
                    }
                }
            }
        }

        stage('Analyse du code') {
            parallel {
                stage('Checkstyle') {
                    steps {
                        dir('Ecommerce_Store') {
                            script {
                                try {
                                    bat 'mvn checkstyle:checkstyle'
                                    echo "‚úÖ Checkstyle analysis completed"
                                } catch (Exception e) {
                                    echo "‚ö†Ô∏è Checkstyle analysis failed: ${e.message}"
                                    echo "Continuing despite Checkstyle failure"
                                    unstable(message: "Checkstyle analysis failed")
                                }
                            }
                        }
                    }
                }
               
                stage('PMD') {
                    steps {
                        dir('Ecommerce_Store') {
                            script {
                                try {
                                    bat 'mvn pmd:pmd'
                                    echo "‚úÖ PMD analysis completed"
                                } catch (Exception e) {
                                    echo "‚ö†Ô∏è PMD analysis failed: ${e.message}"
                                    echo "Continuing despite PMD failure"
                                    unstable(message: "PMD analysis failed")
                                }
                            }
                        }
                    }
                }
                
                // Tentative d'ajout de BugSpot - avec gestion d'erreur
                stage('BugSpot') {
                    steps {
                        script {
                            try {
                                echo "üîç Tentative d'analyse BugSpot"
                                // Tentative d'ex√©cution de BugSpot
                                bat 'bugspot || echo "BugSpot command not found"'
                                echo "‚úÖ BugSpot analysis completed"
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è BugSpot analysis failed: ${e.message}"
                                echo "DEBUG - BugSpot error stack trace: ${e.toString()}"
                                echo "Skipping BugSpot and continuing pipeline"
                            }
                        }
                    }
                }
            }
        }

        stage('JavaDoc') {
            steps {
                dir('Ecommerce_Store') {
                    script {
                        try {
                            bat 'mvn javadoc:javadoc'
                            echo "‚úÖ JavaDoc generation completed"
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è JavaDoc generation failed: ${e.message}"
                            echo "JavaDoc error details: ${e.toString()}"
                            unstable(message: "JavaDoc generation failed")
                        }
                    }
                }
            }
        }

        stage('Packaging') {
            steps {
                dir('Ecommerce_Store') {
                    echo "üì¶ Packaging de l'application"
                    script {
                        try {
                            // Verify JAR file exists before archiving
                            bat 'dir target\\*.jar || echo "No JAR files found in target directory"'
                            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                            echo "‚úÖ Application packaged successfully"
                        } catch (Exception e) {
                            echo "‚ùå Packaging failed: ${e.message}"
                            echo "Packaging error details: ${e.toString()}"
                            unstable(message: "Packaging failed but continuing pipeline")
                        }
                    }
                }
            }
        }

        stage('Archivage') {
            parallel {
                stage('Nexus') {
                    steps {
                        dir('Ecommerce_Store') {
                            script {
                                try {
                                    echo "üì¶ Tentative de d√©ploiement vers Nexus"
                                    bat 'mvn deploy'
                                    echo "‚úÖ D√©ploiement Nexus r√©ussi"
                                } catch (Exception e) {
                                    echo "‚ùå D√©ploiement Nexus √©chou√©: ${e.message}"
                                    echo "D√©tails de l'erreur Nexus: ${e.toString()}"
                                    echo "V√©rifiez les configurations Maven pour Nexus (settings.xml)"
                                    unstable(message: "D√©ploiement Nexus √©chou√© mais continuation du pipeline")
                                }
                            }
                        }
                    }
                }
                stage('Artifactory') {
                    steps {
                        echo 'üì¶ Publication vers Artifactory (placeholder si utilis√©)'
                    }
                }
            }
        }

        stage('Docker Preconditions') {
            steps {
                dir('Ecommerce_Store') {
                    echo "üîç V√©rification des pr√©conditions Docker"
                    script {
                        // V√©rifier si le d√©mon Docker est en cours d'ex√©cution
                        try {
                            bat 'docker info'
                            echo "‚úÖ Docker daemon est en cours d'ex√©cution"
                        } catch (Exception e) {
                            echo "‚ùå ERREUR CRITIQUE: Le d√©mon Docker n'est pas en cours d'ex√©cution"
                            echo "Message d'erreur: ${e.message}"
                            echo "D√©tails: ${e.toString()}"
                            echo "Solutions possibles:"
                            echo "1. V√©rifiez que Docker Desktop est d√©marr√©"
                            echo "2. V√©rifiez que l'agent Jenkins a acc√®s au socket Docker"
                            echo "3. Red√©marrez le service Docker sur l'agent Jenkins"
                            error "Le d√©mon Docker n'est pas en cours d'ex√©cution. Veuillez d√©marrer Docker et r√©essayer."
                        }
                        
                        // Debug - Check Docker version info
                        bat 'docker version'
                        
                        // V√©rifier si Dockerfile existe
                        if (!fileExists('Dockerfile')) {
                            echo "‚ùå ERREUR CRITIQUE: Dockerfile introuvable dans le r√©pertoire courant"
                            echo "R√©pertoire courant: ${pwd()}"
                            bat 'dir'
                            error "Dockerfile introuvable dans l'espace de travail. Veuillez cr√©er un Dockerfile valide."
                        } else {
                            echo "‚úÖ Dockerfile existe"
                            // Show Dockerfile content for debugging
                            if (env.DEBUG_MODE == "true") {
                                echo "=== Contenu du Dockerfile ==="
                                bat 'type Dockerfile'
                            }
                        }
                        
                        // Valider la syntaxe Dockerfile
                        try {
                            echo "üîç Validation du Dockerfile"
                            bat 'docker run --rm -i hadolint/hadolint < Dockerfile || echo "Hadolint validation warnings"'
                            echo "‚úÖ Validation Dockerfile termin√©e"
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è √âchec de la validation Dockerfile mais continuation: ${e.message}"
                            echo "D√©tails de l'erreur: ${e.toString()}"
                        }
                        
                        // Nettoyer les anciennes images pour lib√©rer de l'espace
                        try {
                            echo "üßπ Nettoyage des anciennes images Docker"
                            bat '''
                                FOR /F "tokens=*" %%i IN ('docker images "%DOCKER_IMAGE_NAME%" -q') DO (
                                    echo "Removing image: %%i"
                                    docker rmi -f %%i || echo "Failed to remove image %%i but continuing"
                                )
                            '''
                            echo "‚úÖ Nettoyage des anciennes images Docker termin√©"
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è √âchec du nettoyage des images mais continuation: ${e.message}"
                            echo "D√©tails de l'erreur: ${e.toString()}"
                        }
                        
                        // V√©rifier l'espace disque disponible
                        echo "üíæ V√©rification de l'espace disque disponible"
                        bat 'wmic logicaldisk get deviceid,freespace,size'
                        
                        // V√©rifier les images Docker existantes
                        echo "üìã Images Docker existantes sur le syst√®me"
                        bat 'docker images'
                    }
                }
            }
        }

        stage('D√©ploiement Docker') {
            steps {
                dir('Ecommerce_Store') {
                    script {
                        def tag = "${env.BUILD_NUMBER}"
                        echo "üîß Construction de l'image Docker : ${DOCKER_IMAGE_NAME}:${tag}"
                        
                        // Build the Docker image with detailed error handling
                        try {
                            echo "üì¶ D√©but du build Docker"
                            bat "docker build -t ${DOCKER_IMAGE_NAME}:${tag} ."
                            echo "‚úÖ Image Docker construite avec succ√®s"
                            
                            // Debug: Inspect the built image
                            bat "docker images ${DOCKER_IMAGE_NAME}:${tag}"
                            bat "docker inspect ${DOCKER_IMAGE_NAME}:${tag} || echo 'Inspection failed'"
                        } catch (Exception e) {
                            echo "‚ùå ERREUR de construction Docker: ${e.message}"
                            echo "D√©tails de l'erreur: ${e.toString()}"
                            echo "V√©rifiez le Dockerfile et les fichiers n√©cessaires"
                            // Continue despite build failure
                            unstable(message: "Construction Docker √©chou√©e")
                            return
                        }
                        
                        // Try Docker login separately to isolate authentication issues
                        try {
                            echo "üîë Test de connexion Docker Hub (sans push)"
                            withCredentials([usernamePassword(
                                credentialsId: 'dockerhub-creds',
                                usernameVariable: 'DOCKER_USERNAME',
                                passwordVariable: 'DOCKER_PASSWORD'
                            )]) {
                                // Logout first to avoid credential issues
                                bat 'docker logout'
                                
                                // Test login only
                                bat """
                                    echo "Tentative de connexion √† Docker Hub avec l'utilisateur %DOCKER_USERNAME%"
                                    docker login -u "%DOCKER_USERNAME%" -p "%DOCKER_PASSWORD%"
                                """
                                echo "‚úÖ Test de connexion Docker Hub r√©ussi"
                            }
                        } catch (Exception e) {
                            echo "‚ùå ERREUR d'authentification Docker Hub: ${e.message}"
                            echo "D√©tails de l'erreur: ${e.toString()}"
                            echo "V√©rifiez les points suivants:"
                            echo "1. Les identifiants 'dockerhub-creds' sont-ils corrects dans Jenkins?"
                            echo "2. L'utilisateur a-t-il les permissions n√©cessaires sur Docker Hub?"
                            echo "3. Y a-t-il des probl√®mes r√©seau ou de pare-feu?"
                            // Continue despite login issues - we'll try during push
                        }
                        
                        // Push with retries and detailed debugging
                        retry(3) {
                            try {
                                echo "‚¨ÜÔ∏è Tentative de push de l'image Docker (essai ${currentBuild.retryCount + 1}/3)"
                                timeout(time: 2, unit: 'MINUTES') {
                                    withCredentials([usernamePassword(
                                        credentialsId: 'dockerhub-creds',
                                        usernameVariable: 'DOCKER_USERNAME',
                                        passwordVariable: 'DOCKER_PASSWORD'
                                    )]) {
                                        // Logout first to avoid credential issues
                                        bat 'docker logout'
                                        
                                        // Debug network conditions
                                        if (env.DEBUG_MODE == "true") {
                                            echo "Checking network connectivity to Docker Hub"
                                            bat "ping -n 3 registry-1.docker.io || echo Ping failed but continuing"
                                        }
                                        
                                        // Login, tag, and push with detailed output
                                        echo "üîë Connexion √† Docker Hub avec l'utilisateur ${DOCKER_USERNAME}"
                                        bat "docker login -u \"%DOCKER_USERNAME%\" -p \"%DOCKER_PASSWORD%\""
                                        
                                        echo "üè∑Ô∏è Tag de l'image: ${DOCKER_IMAGE_NAME}:${tag} ‚Üí %DOCKER_USERNAME%/${DOCKER_IMAGE_NAME}:${tag}"
                                        bat "docker tag ${DOCKER_IMAGE_NAME}:${tag} %DOCKER_USERNAME%/${DOCKER_IMAGE_NAME}:${tag}"
                                        
                                        echo "‚¨ÜÔ∏è Push de l'image: %DOCKER_USERNAME%/${DOCKER_IMAGE_NAME}:${tag}"
                                        bat """
                                            docker push %DOCKER_USERNAME%/${DOCKER_IMAGE_NAME}:${tag} || (
                                                echo "*** D√âTAILS DE L'ERREUR DE PUSH ***"
                                                echo "Username: %DOCKER_USERNAME%"
                                                echo "Image: ${DOCKER_IMAGE_NAME}:${tag}"
                                                echo "Taille de l'image:"
                                                docker images %DOCKER_USERNAME%/${DOCKER_IMAGE_NAME}:${tag} --format "{{.Size}}"
                                                exit 1
                                            )
                                        """
                                        echo "‚úÖ Push Docker r√©ussi"
                                    }
                                }
                            } catch (Exception e) {
                                echo "‚ùå √âCHEC de la pouss√©e Docker (essai ${currentBuild.retryCount + 1}/3)"
                                echo "Message d'erreur: ${e.message}"
                                echo "Stack trace: ${e.toString()}"
                                echo "Analyse du probl√®me:"
                                echo "1. Probl√®me d'authentification? V√©rifiez les identifiants"
                                echo "2. Probl√®me de r√©seau? V√©rifiez la connectivit√©"
                                echo "3. Probl√®me de quota sur Docker Hub? V√©rifiez votre compte"
                                echo "4. Image trop grande? V√©rifiez la taille et optimisez"
                                
                                // Retry diagnostics
                                echo "Tentative de diagnostics suppl√©mentaires:"
                                bat 'docker info || echo "Docker info failed"'
                                
                                sleep(time: 10, unit: 'SECONDS')
                                error("Nouvelle tentative de pouss√©e")
                            }
                        }
                        
                        // Archive the Docker image even if push fails
                        try {
                            echo "üì¶ Archivage de l'image Docker"
                            bat """
                                mkdir -p target\\docker-image
                                docker save ${DOCKER_IMAGE_NAME}:${tag} -o target\\docker-image\\${DOCKER_IMAGE_NAME}.tar
                            """
                            archiveArtifacts artifacts: "target/docker-image/${DOCKER_IMAGE_NAME}.tar", fingerprint: true
                            echo "‚úÖ Image Docker archiv√©e comme artefact Jenkins"
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è √âchec de l'archivage de l'image Docker: ${e.message}"
                            echo "D√©tails de l'erreur: ${e.toString()}"
                        }
                    }
                }
            }
            post {
                success {
                    echo "üéâ Image Docker construite et pouss√©e avec succ√®s"
                }
                failure {
                    echo "‚ùå √âchec du d√©ploiement Docker, mais le pipeline continue"
                    unstable(message: "√âchec du d√©ploiement Docker mais le pipeline continue")
                }
            }
        }

        stage('End') {
            steps {
                echo '‚úÖ Pipeline CI/CD termin√© avec succ√®s !'
                script {
                    // Print summary of what happened
                    echo "=== R√©sum√© du pipeline ==="
                    echo "Build Number: ${env.BUILD_NUMBER}"
                    echo "R√©sultat: ${currentBuild.currentResult}"
                    echo "Dur√©e: ${currentBuild.durationString}"
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Nettoyage de l'espace de travail"
            cleanWs()
        }
        success {
            emailext(
                to: 'sohaybelbakali@gmail.com',
                subject: "‚úÖ Succ√®s Pipeline ${JOB_NAME} #${BUILD_NUMBER}",
                body: """
Le pipeline s'est termin√© avec succ√®s.

üîß Job: ${JOB_NAME}
üî¢ Build: #${BUILD_NUMBER}
üîó URL: ${BUILD_URL}
‚è±Ô∏è Dur√©e: ${currentBuild.durationString}

Un rapport complet est disponible dans Jenkins.
"""
            )
        }
        failure {
            emailext(
                to: 'sohaybelbakali@gmail.com',
                subject: "‚ùå √âCHEC Pipeline ${JOB_NAME} #${BUILD_NUMBER}",
                body: """
Le pipeline a √©chou√© √† l'√©tape ${currentBuild.currentResult}. 

üîß Job: ${JOB_NAME}
üî¢ Build: #${BUILD_NUMBER}
üîó URL: ${BUILD_URL}
‚è±Ô∏è Dur√©e: ${currentBuild.durationString}
üõë √âtape en √©chec: ${currentBuild.displayName}

Veuillez consulter le journal en pi√®ce jointe pour les d√©tails.
""", attachLog: true
            )
        }
        unstable {
            emailext(
                to: 'sohaybelbakali@gmail.com',
                subject: "‚ö†Ô∏è INSTABLE Pipeline ${JOB_NAME} #${BUILD_NUMBER}",
                body: """
Le pipeline s'est termin√© avec un √©tat instable. 

üîß Job: ${JOB_NAME}
üî¢ Build: #${BUILD_NUMBER}
üîó URL: ${BUILD_URL}
‚è±Ô∏è Dur√©e: ${currentBuild.durationString}

Le pipeline a continu√© malgr√© certaines erreurs. Veuillez consulter le journal pour les d√©tails.
""", attachLog: true
            )
        }
    }
}
